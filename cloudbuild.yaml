# cloudbuild.yaml
steps:
  # 0. Install pnpm (if not available in the build environment)
  - name: 'node:20' # Use a Node.js image that has npm
    entrypoint: npm
    args: ['install', '-g', 'pnpm']

  # 1. Install Dependencies
  - name: 'node:20' # Use the same Node.js version as Dockerfile base
    entrypoint: pnpm
    args: ['install', '--frozen-lockfile']
    id: install-deps

  # 2. Build Next.js App (Frontend & Backend API)
  # Pass Firebase config as build-time environment variables
  - name: 'node:20'
    entrypoint: pnpm
    args: ['run', 'build']
    secretEnv: ['NEXT_PUBLIC_FIREBASE_API_KEY', 'NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN', 'NEXT_PUBLIC_FIREBASE_PROJECT_ID', 'NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET', 'NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID', 'NEXT_PUBLIC_FIREBASE_APP_ID'] # Add Measurement ID if needed
    id: build-app
    waitFor: ['install-deps']

  # 3. Build Docker image for Cloud Run
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/specsheet-api:$COMMIT_SHA' # Tag with commit SHA
      - '.' # Build context is the root directory
      - '-f'
      - 'Dockerfile' # Specify the Dockerfile
    id: build-docker-image
    waitFor: ['build-app']

  # 4. Push Docker image to Google Container Registry (GCR)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/specsheet-api:$COMMIT_SHA']
    id: push-docker-image
    waitFor: ['build-docker-image']

  # 5. Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'specsheet-api' # Cloud Run service name
      - '--image'
      - 'gcr.io/$PROJECT_ID/specsheet-api:$COMMIT_SHA'
      - '--region'
      - 'asia-northeast1' # Specify your desired region
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated' # Allow public access, adjust if needed
      - '--set-secrets=GOOGLE_GENERATIVE_AI_API_KEY=GOOGLE_GENERATIVE_AI_API_KEY:latest' # Mount secret as environment variable
      - '--project=$PROJECT_ID'
    id: deploy-cloud-run
    waitFor: ['push-docker-image']

  # 6. Deploy to Firebase Hosting
  - name: 'gcr.io/cloud-builders/npm' # npm is included, use it to run firebase-tools
    entrypoint: npx
    args:
      - '-p'
      - 'firebase-tools' # Install firebase-tools temporarily
      - 'firebase'
      - 'deploy'
      - '--only'
      - 'hosting'
      - '--project=$PROJECT_ID' # Use GCP Project ID which is linked to Firebase
      - '--token=$FIREBASE_TOKEN' # Use Firebase token stored in Secret Manager
    secretEnv: ['FIREBASE_TOKEN']
    id: deploy-firebase-hosting
    waitFor: ['build-app'] # Depends only on the build step

# Define available secrets from Secret Manager
availableSecrets:
  secretManager:
    # Firebase Deploy Token (Store your Firebase CI token here)
    - versionName: projects/$PROJECT_ID/secrets/FIREBASE_TOKEN/versions/latest
      env: 'FIREBASE_TOKEN'
    # Firebase Public Config (needed at build time)
    - versionName: projects/$PROJECT_ID/secrets/NEXT_PUBLIC_FIREBASE_API_KEY/versions/latest
      env: 'NEXT_PUBLIC_FIREBASE_API_KEY'
    - versionName: projects/$PROJECT_ID/secrets/NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN/versions/latest
      env: 'NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN'
    - versionName: projects/$PROJECT_ID/secrets/NEXT_PUBLIC_FIREBASE_PROJECT_ID/versions/latest
      env: 'NEXT_PUBLIC_FIREBASE_PROJECT_ID'
    - versionName: projects/$PROJECT_ID/secrets/NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET/versions/latest
      env: 'NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET'
    - versionName: projects/$PROJECT_ID/secrets/NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID/versions/latest
      env: 'NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID'
    - versionName: projects/$PROJECT_ID/secrets/NEXT_PUBLIC_FIREBASE_APP_ID/versions/latest
      env: 'NEXT_PUBLIC_FIREBASE_APP_ID'
    # Add NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID if needed

# Tag images with commit SHA for traceability
images:
  - 'gcr.io/$PROJECT_ID/specsheet-api:$COMMIT_SHA'

# Timeout for the entire build
timeout: '1200s' # 20 minutes

options:
  logging: CLOUD_LOGGING_ONLY 